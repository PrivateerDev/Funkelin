// ‚úÖ Funci√≥n para obtener mascotas con validaciones avanzadas y manejo resiliente
export async function fetchMascotas() {
    console.debug("üì° Ejecutando `fetchMascotas()` para obtener mascotas...");

    const CONTROLLER = new AbortController();  // ‚úÖ Agregar un timeout para evitar bloqueos
    const TIMEOUT_MS = 5000; // ‚è≥ Tiempo m√°ximo de espera

    try {
        console.info("üîé Iniciando solicitud al backend...");

        // ‚úÖ Configurar timeout en la solicitud
        const timeout = setTimeout(() => {
            CONTROLLER.abort();
            console.warn("‚è≥ Solicitud abortada: tiempo de espera excedido.");
        }, TIMEOUT_MS);

        const response = await fetch("http://127.0.0.1:5000/api/mascotas", {
            method: "GET",
            headers: { "Accept": "application/json" },
            mode: "cors",
            signal: CONTROLLER.signal  // ‚úÖ Asociar el timeout
        });

        clearTimeout(timeout); // ‚úÖ Limpiar timeout si la solicitud se completa

        // ‚úÖ Validar respuesta HTTP antes de procesar datos
        console.assert(response instanceof Response, "‚ö† La respuesta no es un objeto Response.");
        if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);

        const mascotas = await response.json();

        // ‚úÖ Postcondici√≥n: Verificar que los datos recibidos son correctos
        if (!Array.isArray(mascotas)) throw new Error("‚ö† La respuesta del backend no es una lista v√°lida.");
        if (!mascotas.every(m => typeof m.nombre === "string")) throw new Error("‚ö† Alguna mascota no tiene un nombre v√°lido.");

        console.info(`‚úÖ Mascotas obtenidas con √©xito (${mascotas.length} registros)`);
        return mascotas;

    } catch (error) {
        if (error.name === "AbortError") {
            console.error("‚è≥ Tiempo de espera excedido al obtener mascotas.");
        } else {
            console.error("‚ö† Error al obtener mascotas:", error);
        }
        return [];
    }
}