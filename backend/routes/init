import logging
from flask import Blueprint

# âœ… Configurar logging para la inicializaciÃ³n de Blueprints
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("backend/logs/funkelin_blueprints.log"),
        logging.StreamHandler()
    ]
)

logging.debug("ðŸ”„ Iniciando la configuraciÃ³n de rutas en Funkelin")

# âœ… Diccionario de errores centralizado
ERROR_MESSAGES = {
    "import_fail": "No se pudo importar el Blueprint `mascotas_bp`. Verifica rutas o dependencias.",
    "register_fail": "Error al registrar Blueprint en la aplicaciÃ³n.",
    "unexpected_error": "Error inesperado en la inicializaciÃ³n de rutas."
}

# âœ… Importa los Blueprints de cada mÃ³dulo de rutas
try:
    from backend.routes.mascotas import mascotas_bp
    logging.info("âœ… Blueprint `mascotas_bp` importado correctamente")
except ImportError as e:
    logging.error(f"âš  {ERROR_MESSAGES['import_fail']} - Detalles: {e}")

# âœ… Lista de Blueprints registrados en el sistema
blueprints = [mascotas_bp]

def register_blueprints(app):
    """Registra todos los Blueprints en la aplicaciÃ³n Flask."""
    logging.debug("ðŸš€ Registrando Blueprints en la aplicaciÃ³n")
    for blueprint in blueprints:
        try:
            app.register_blueprint(blueprint)
            logging.info(f"âœ… Blueprint `{blueprint.name}` registrado exitosamente")
        except Exception as e:
            logging.error(f"âš  {ERROR_MESSAGES['register_fail']} - Blueprint `{blueprint.name}` - Detalles: {e}")

logging.debug("âœ… Finalizando la inicializaciÃ³n de rutas")