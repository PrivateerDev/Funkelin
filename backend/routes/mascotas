from flask import Blueprint, request, jsonify
from flask_cors import CORS  # ‚úÖ Permitir solicitudes del frontend
from backend.models import db  # ‚úÖ Evitar conflictos en importaciones
from backend.models.mascota import Mascota
from backend.services.mascota_service import agregar_mascota, obtener_mascotas

# ‚úÖ Definir el blueprint con un prefijo m√°s estructurado
mascotas_bp = Blueprint("mascotas", __name__, url_prefix="/api/mascotas")

# ‚úÖ Habilitar CORS en las rutas de mascotas
CORS(mascotas_bp, resources={r"/api/*": {"origins": "*"}})

# ‚úÖ Ruta de prueba
@mascotas_bp.route("/test", methods=["GET"])
def test():
    """Ruta de prueba para verificar que el backend est√° activo."""
    return jsonify({"mensaje": "Funkelin backend activo üöÄ"}), 200

# ‚úÖ Ruta para obtener la lista de todas las mascotas
@mascotas_bp.route("/", methods=["GET"])
def get_mascotas():
    """Retorna la lista de mascotas registradas con manejo de errores."""
    try:
        mascotas = obtener_mascotas()
        assert isinstance(mascotas, list), "Error: La respuesta de obtener_mascotas debe ser una lista."
        return jsonify(mascotas), 200
    except AssertionError as ae:
        return jsonify({"error": f"Error interno de validaci√≥n: {str(ae)}"}), 500
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": f"Error al obtener mascotas: {str(e)}"}), 500

# ‚úÖ Ruta para agregar una nueva mascota con validaciones defensivas
@mascotas_bp.route("/", methods=["POST"])
def post_mascota():
    """Agrega una nueva mascota al sistema con validaciones estrictas."""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "No se recibi√≥ ning√∫n dato."}), 400

        # ‚úÖ Validaciones de entrada con precondiciones
        nombre = data.get("nombre", "").strip()
        especie = data.get("especie", "").strip()
        edad = data.get("edad")

        assert isinstance(nombre, str) and len(nombre) > 1, "El nombre debe ser un string de al menos 2 caracteres."
        assert isinstance(especie, str) and especie in ["Perro", "Gato", "Ave", "Otro"], "Especie no v√°lida."
        assert isinstance(edad, int) and edad > 0, "Edad debe ser un n√∫mero entero positivo."

        # ‚úÖ Generar la mascota con programaci√≥n defensiva
        nueva_mascota = agregar_mascota(nombre, especie, edad)

        # ‚úÖ Postcondici√≥n: verificar que se cre√≥ correctamente
        assert nueva_mascota is not None, "Error: La mascota no se cre√≥ correctamente."
        return jsonify(nueva_mascota.to_dict()), 201
    except AssertionError as ae:
        return jsonify({"error": f"Error de validaci√≥n: {str(ae)}"}), 400
    except ValueError as ve:
        db.session.rollback()
        return jsonify({"error": f"Error de validaci√≥n: {str(ve)}"}), 400
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": f"Error interno al agregar mascota: {str(e)}"}), 500