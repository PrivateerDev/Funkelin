import logging
from flask import Blueprint, request, jsonify
from flask_cors import CORS  # âœ… Permitir solicitudes del frontend
from backend.models import db  # âœ… Evitar conflictos en importaciones
from backend.models.mascota import Mascota
from backend.services.mascota_service import agregar_mascota, obtener_mascotas

# âœ… Configurar logging para auditorÃ­a completa
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("backend/logs/funkelin_routes.log"),
        logging.StreamHandler()
    ]
)

# âœ… Diccionario centralizado de errores
ERROR_MESSAGES = {
    "no_data": "No se recibiÃ³ ningÃºn dato.",
    "invalid_age": "Edad debe ser un nÃºmero entero vÃ¡lido.",
    "invalid_name": "El nombre debe tener entre 2 y 50 caracteres.",
    "invalid_type": "Tipo de mascota no vÃ¡lido.",
    "unexpected_error": "Error interno inesperado.",
    "mascota_not_found": "Mascota no encontrada."
}

# âœ… Definir el blueprint con un prefijo estructurado
logging.debug("Inicializando Blueprint para mascotas")
mascotas_bp = Blueprint("mascotas", __name__, url_prefix="/api/mascotas")
CORS(mascotas_bp, resources={r"/api/*": {"origins": "*"}})

# âœ… Ruta de prueba
@mascotas_bp.route("/test", methods=["GET"])
def test():
    """Ruta de prueba para verificar que el backend estÃ¡ activo."""
    logging.info("âœ… Endpoint `/test` ejecutado correctamente")
    return jsonify({"mensaje": "Funkelin backend activo ðŸš€"}), 200

# âœ… Ruta para obtener la lista de todas las mascotas con manejo de errores
@mascotas_bp.route("/", methods=["GET"])
def get_mascotas():
    """Retorna la lista de mascotas registradas con manejo de errores."""
    logging.debug("Ejecutando `get_mascotas()`")
    try:
        mascotas = obtener_mascotas()
        assert isinstance(mascotas, list), "La respuesta debe ser una lista."

        logging.info(f"âœ… Mascotas obtenidas exitosamente ({len(mascotas)} registros)")
        return jsonify(mascotas), 200
    except AssertionError as ae:
        logging.error(f"âš  Error en `get_mascotas()`: {str(ae)}")
        return jsonify({"error": ERROR_MESSAGES["unexpected_error"]}), 500
    except Exception as e:
        db.session.rollback()
        logging.error(f"âš  Error crÃ­tico en `get_mascotas()`: {str(e)}")
        return jsonify({"error": ERROR_MESSAGES["unexpected_error"]}), 500

# âœ… Ruta para agregar una nueva mascota con validaciones defensivas
@mascotas_bp.route("/", methods=["POST"])
def post_mascota():
    """Agrega una nueva mascota al sistema con validaciones estrictas."""
    logging.debug("Ejecutando `post_mascota()`")
    try:
        data = request.get_json()
        if not data:
            logging.warning("âš  Intento de POST sin datos")
            return jsonify({"error": ERROR_MESSAGES["no_data"]}), 400

        nombre = data.get("nombre", "").strip()
        especie = data.get("especie", "").strip()
        edad = data.get("edad")

        try:
            edad = int(edad)
        except ValueError:
            logging.warning("âš  Edad invÃ¡lida en `post_mascota()`")
            return jsonify({"error": ERROR_MESSAGES["invalid_age"]}), 400

        if not (nombre and 2 <= len(nombre) <= 50):
            return jsonify({"error": ERROR_MESSAGES["invalid_name"]}), 400
        if especie not in ["Perro", "Gato", "Ave", "Otro"]:
            return jsonify({"error": ERROR_MESSAGES["invalid_type"]}), 400
        if not (isinstance(edad, int) and edad > 0):
            return jsonify({"error": ERROR_MESSAGES["invalid_age"]}), 400

        nueva_mascota = agregar_mascota(nombre, especie, edad)
        if nueva_mascota is None:
            raise ValueError("Error: La mascota no se creÃ³ correctamente.")

        logging.info(f"âœ… Mascota agregada: {nueva_mascota.to_dict()}")
        return jsonify(nueva_mascota.to_dict()), 201
    except (AssertionError, ValueError) as ae:
        logging.warning(f"âš  ValidaciÃ³n fallida en `post_mascota()`: {str(ae)}")
        return jsonify({"error": f"Error de validaciÃ³n: {str(ae)}"}), 400
    except Exception as e:
        db.session.rollback()
        logging.error(f"âš  Error crÃ­tico en `post_mascota()`: {str(e)}")
        return jsonify({"error": ERROR_MESSAGES["unexpected_error"]}), 500