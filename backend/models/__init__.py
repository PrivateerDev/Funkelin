import logging
from flask_sqlalchemy import SQLAlchemy

# âœ… Configurar logging para auditorÃ­a de inicializaciÃ³n de base de datos
logging.basicConfig(
    level=logging.DEBUG,  # Permitimos rastreo completo
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("backend/logs/funkelin_db.log", encoding="utf-8"),  # Asegurar codificaciÃ³n UTF-8
        logging.StreamHandler()
    ]
)

logging.debug("ðŸ”„ Inicializando la instancia de SQLAlchemy")

# âœ… Diccionario centralizado de errores
ERROR_MESSAGES = {
    "import_fail": "No se pudo importar el modelo Mascota. Verifica rutas o dependencias.",
    "unexpected_error": "Error inesperado en la inicializaciÃ³n de la base de datos."
}

# âœ… InicializaciÃ³n segura de la base de datos
try:
    db = SQLAlchemy()
    logging.info("âœ… Base de datos inicializada correctamente")
except Exception as e:
    logging.critical(f"âš  {ERROR_MESSAGES['unexpected_error']} - Detalles: {e}")
    raise RuntimeError(ERROR_MESSAGES["unexpected_error"])

# âœ… ImportaciÃ³n explÃ­cita de modelos para evitar errores de referencia circular
logging.debug("ðŸ”„ Importando el modelo Mascota")
try:
    from backend.models.mascota import Mascota  # noqa: F401
    logging.info("âœ… Modelo `Mascota` importado correctamente")
except ImportError as e:
    logging.error(f"âš  {ERROR_MESSAGES['import_fail']} - Detalles: {e}")

# âœ… Definir los elementos disponibles en el mÃ³dulo
__all__ = ["db", "Mascota"]

logging.debug("âœ… Finalizando la inicializaciÃ³n del mÃ³dulo de base de datos")