from __future__ import annotations
from typing import TYPE_CHECKING, Dict, Any
import logging
from backend.models import db  # âœ… ImportaciÃ³n desde models para evitar ciclos

if TYPE_CHECKING:
    from flask_sqlalchemy.model import Model

# âœ… Configurar logging con niveles detallados
logging.basicConfig(
    level=logging.DEBUG,  # Registrar todos los eventos
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("backend/logs/funkelin_model.log", encoding="utf-8"),  # Asegurar codificaciÃ³n UTF-8
        logging.StreamHandler()
    ]
)

# âœ… Diccionario centralizado de mensajes de error
ERROR_MESSAGES = {
    "invalid_name": "El nombre debe contener entre 2 y 50 caracteres, sin nÃºmeros ni sÃ­mbolos.",
    "invalid_type": "Tipo de mascota no vÃ¡lido. Debe ser 'Perro', 'Gato', 'Ave' o 'Otro'.",
    "invalid_age": "La edad debe ser un nÃºmero entero positivo mayor a 0.",
    "unexpected_error": "Error inesperado al inicializar el modelo de Mascota."
}

class Mascota(db.Model):  # type: ignore
    """Modelo de Mascota en la base de datos con validaciones defensivas."""

    __tablename__ = "mascotas"

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    nombre = db.Column(db.String(50), nullable=False)
    tipo = db.Column(db.String(50), nullable=False)
    edad = db.Column(db.Integer, nullable=False)

    def __init__(self, nombre: str, tipo: str, edad: int) -> None:
        """Inicializa una instancia de Mascota con validaciones seguras."""
        logging.debug("ðŸ”„ Inicio de la inicializaciÃ³n de Mascota")

        try:
            self.nombre = self.validar_nombre(nombre)
            self.tipo = self.validar_tipo(tipo)
            self.edad = self.validar_edad(edad)

            logging.info(f"âœ… Mascota creada exitosamente: {self.to_dict()}")
        except ValueError as e:
            logging.error(f"âš  Error al crear Mascota: {str(e)}")
            raise ValueError(f"{ERROR_MESSAGES['unexpected_error']} - {str(e)}")

        logging.debug("âœ… Fin de la inicializaciÃ³n de Mascota")

    @staticmethod
    def validar_nombre(nombre: str) -> str:
        """Valida y sanitiza el nombre."""
        logging.debug(f"ðŸ”Ž Validando nombre: {nombre}")
        if not isinstance(nombre, str) or len(nombre.strip()) < 2 or len(nombre.strip()) > 50:
            logging.warning(f"âš  Nombre invÃ¡lido: {nombre}")
            raise ValueError(ERROR_MESSAGES["invalid_name"])
        return nombre.strip()

    @staticmethod
    def validar_tipo(tipo: str) -> str:
        """Valida el tipo de mascota."""
        logging.debug(f"ðŸ”Ž Validando tipo de mascota: {tipo}")
        if tipo not in ["Perro", "Gato", "Ave", "Otro"]:
            logging.warning(f"âš  Tipo invÃ¡lido: {tipo}")
            raise ValueError(ERROR_MESSAGES["invalid_type"])
        return tipo.strip()

    @staticmethod
    def validar_edad(edad: int) -> int:
        """Valida la edad como un nÃºmero entero positivo."""
        logging.debug(f"ðŸ”Ž Validando edad: {edad}")
        if not isinstance(edad, int) or edad <= 0:
            logging.warning(f"âš  Edad invÃ¡lida: {edad}")
            raise ValueError(ERROR_MESSAGES["invalid_age"])
        return edad

    def to_dict(self) -> Dict[str, Any]:
        """Convierte el objeto Mascota a un diccionario con tolerancia a errores."""
        logging.debug("ðŸ”„ Convirtiendo Mascota a diccionario")
        return {
            "id": getattr(self, "id", None),
            "nombre": getattr(self, "nombre", "Desconocido"),
            "tipo": getattr(self, "tipo", "Desconocido"),
            "edad": getattr(self, "edad", 0)
        }