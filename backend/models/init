import logging

# âœ… Configurar logging para la inicializaciÃ³n del mÃ³dulo de modelos
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("backend/logs/funkelin_models_init.log"),
        logging.StreamHandler()
    ]
)

logging.debug("ðŸ”„ Iniciando la importaciÃ³n de modelos de Funkelin")

# âœ… Diccionario centralizado de errores
ERROR_MESSAGES = {
    "import_fail": "No se pudo importar el modelo Mascota. Verifica rutas o dependencias.",
    "db_fail": "Error al importar la base de datos. Verifica la conexiÃ³n y configuraciÃ³n.",
    "unexpected_error": "Error inesperado en la inicializaciÃ³n de modelos."
}

# âœ… ImportaciÃ³n organizada de modelos
try:
    from .mascota import Mascota  # âœ… Importa el modelo de Mascota
    logging.info("âœ… Modelo `Mascota` importado correctamente")
except ImportError as e:
    logging.error(f"âš  {ERROR_MESSAGES['import_fail']} - Detalles: {e}")

# âœ… ImportaciÃ³n de la base de datos
try:
    from backend.models import db  # âœ… Asegura que la base de datos se inicializa correctamente
    logging.info("âœ… Base de datos importada correctamente")
except ImportError as e:
    logging.error(f"âš  {ERROR_MESSAGES['db_fail']} - Detalles: {e}")

# âœ… Registro global de modelos
__all__ = ["Mascota", "db"]

logging.debug("âœ… Finalizando la inicializaciÃ³n del mÃ³dulo de modelos")