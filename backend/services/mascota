import logging
from flask import abort
from backend.models import db  # âœ… Importa db correctamente desde `models`
from backend.models.mascota import Mascota

# âœ… Configurar logging para auditorÃ­a detallada
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("backend/logs/funkelin_services.log"),
        logging.StreamHandler()
    ]
)

# âœ… Diccionario centralizado de errores
ERROR_MESSAGES = {
    "invalid_name": "El nombre debe tener entre 2 y 50 caracteres.",
    "invalid_type": "Tipo de mascota no vÃ¡lido.",
    "invalid_age": "La edad debe ser un nÃºmero entero positivo.",
    "db_commit_fail": "Error interno al guardar la mascota.",
    "db_query_fail": "Error interno al obtener la lista de mascotas.",
    "db_delete_fail": "Error interno al eliminar la mascota.",
    "not_found": "No se encontrÃ³ ninguna mascota con el ID proporcionado."
}

def agregar_mascota(nombre: str, tipo: str, edad: int) -> Mascota:
    """Agrega una nueva mascota a la base de datos con validaciones defensivas y registro de eventos."""
    logging.debug(f"ðŸ”„ Inicio de `agregar_mascota()` con datos: nombre={nombre}, tipo={tipo}, edad={edad}")

    try:
        if not isinstance(nombre, str) or len(nombre.strip()) < 2 or len(nombre.strip()) > 50:
            logging.warning(f"âš  Nombre invÃ¡lido en `agregar_mascota()`: {nombre}")
            raise ValueError(ERROR_MESSAGES["invalid_name"])
        if not isinstance(tipo, str) or tipo.strip() not in ["Perro", "Gato", "Ave", "Otro"]:
            logging.warning(f"âš  Tipo invÃ¡lido en `agregar_mascota()`: {tipo}")
            raise ValueError(ERROR_MESSAGES["invalid_type"])
        if not isinstance(edad, int) or edad <= 0:
            logging.warning(f"âš  Edad invÃ¡lida en `agregar_mascota()`: {edad}")
            raise ValueError(ERROR_MESSAGES["invalid_age"])

        nueva_mascota = Mascota(nombre=nombre.strip(), tipo=tipo.strip(), edad=edad)

        try:
            with db.session.begin():
                db.session.add(nueva_mascota)
                db.session.commit()
            logging.info(f"âœ… Mascota agregada exitosamente: {nueva_mascota.to_dict()}")
        except Exception as e:
            db.session.rollback()
            logging.error(f"âš  {ERROR_MESSAGES['db_commit_fail']} - Detalles: {str(e)}")
            raise RuntimeError(ERROR_MESSAGES["db_commit_fail"])

        return nueva_mascota

    except Exception as e:
        logging.error(f"âš  Error inesperado en `agregar_mascota()`: {str(e)}")
        raise RuntimeError(f"{ERROR_MESSAGES['db_commit_fail']} - {str(e)}")

def obtener_mascotas() -> list[dict]:
    """Devuelve la lista de mascotas con validaciones de integridad y auditorÃ­a."""
    logging.debug("ðŸ”„ Ejecutando `obtener_mascotas()`")

    try:
        with db.session.no_autoflush:
            mascotas = Mascota.query.all()
            assert isinstance(mascotas, list), ERROR_MESSAGES["db_query_fail"]

            logging.info(f"âœ… Mascotas obtenidas exitosamente ({len(mascotas)} registros)")
            return [mascota.to_dict() for mascota in mascotas]

    except Exception as e:
        db.session.rollback()
        logging.error(f"âš  {ERROR_MESSAGES['db_query_fail']} - Detalles: {str(e)}")
        raise RuntimeError(ERROR_MESSAGES["db_query_fail"])

def eliminar_mascota(id: int) -> bool:
    """Elimina una mascota de la base de datos con validaciones robustas y auditorÃ­a."""
    logging.debug(f"ðŸ”„ Ejecutando `eliminar_mascota()` con ID={id}")

    try:
        if not isinstance(id, int) or id <= 0:
            logging.warning(f"âš  ID invÃ¡lido en `eliminar_mascota()`: {id}")
            raise ValueError("El ID debe ser un nÃºmero entero positivo.")

        mascota = Mascota.query.get(id)
        if mascota is None:
            logging.warning(f"âš  Intento de eliminar mascota no existente (ID={id})")
            abort(404, ERROR_MESSAGES["not_found"])

        try:
            with db.session.begin():
                db.session.delete(mascota)
                db.session.commit()
            logging.info(f"âœ… Mascota eliminada exitosamente: ID {id}")
        except Exception as e:
            db.session.rollback()
            logging.error(f"âš  {ERROR_MESSAGES['db_delete_fail']} - Detalles: {str(e)}")
            raise RuntimeError(ERROR_MESSAGES["db_delete_fail"])

        return True

    except Exception as e:
        logging.error(f"âš  Error inesperado en `eliminar_mascota()`: {str(e)}")
        raise RuntimeError(f"{ERROR_MESSAGES['db_delete_fail']} - {str(e)}")